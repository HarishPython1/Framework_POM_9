{"name": "test_login", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Harish\\\\PycharmProjects\\\\Framework_POM_9Login.xlsx'", "trace": "self = <test_login.TestLogin object at 0x0000021D51204E10>\n\n    def test_login(self):\n        driver = self.driver\n        lp = LoginPage(driver)\n>       lp.enter_un()\n\ntests\\test_login.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\loginpage.py:18: in enter_un\n    un = select_cell_val(\"Login.xlsx\",\"setup\",\"Un\")\npages\\ExcelUtil.py:7: in select_cell_val\n    wb = xlrd.open_workbook(path + file_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = 'C:\\\\Users\\\\Harish\\\\PycharmProjects\\\\Framework_POM_9Login.xlsx'\nlogfile = <_pytest.capture.EncodedFile object at 0x0000021D50F0C3C8>, verbosity = 0, use_mmap = 1, file_contents = None\nencoding_override = None, formatting_info = False, on_demand = False, ragged_rows = False\n\n    def open_workbook(filename=None,\n                      logfile=sys.stdout,\n                      verbosity=0,\n                      use_mmap=USE_MMAP,\n                      file_contents=None,\n                      encoding_override=None,\n                      formatting_info=False,\n                      on_demand=False,\n                      ragged_rows=False):\n        \"\"\"\n        Open a spreadsheet file for data extraction.\n    \n        :param filename: The path to the spreadsheet file to be opened.\n    \n        :param logfile: An open file to which messages and diagnostics are written.\n    \n        :param verbosity: Increases the volume of trace material written to the\n                          logfile.\n    \n        :param use_mmap:\n    \n          Whether to use the mmap module is determined heuristically.\n          Use this arg to override the result.\n    \n          Current heuristic: mmap is used if it exists.\n    \n        :param file_contents:\n    \n          A string or an :class:`mmap.mmap` object or some other behave-alike\n          object. If ``file_contents`` is supplied, ``filename`` will not be used,\n          except (possibly) in messages.\n    \n        :param encoding_override:\n    \n          Used to overcome missing or bad codepage information\n          in older-version files. See :doc:`unicode`.\n    \n        :param formatting_info:\n    \n          The default is ``False``, which saves memory.\n          In this case, \"Blank\" cells, which are those with their own formatting\n          information but no data, are treated as empty by ignoring the file's\n          ``BLANK`` and ``MULBLANK`` records.\n          This cuts off any bottom or right \"margin\" of rows of empty or blank\n          cells.\n          Only :meth:`~xlrd.sheet.Sheet.cell_value` and\n          :meth:`~xlrd.sheet.Sheet.cell_type` are available.\n    \n          When ``True``, formatting information will be read from the spreadsheet\n          file. This provides all cells, including empty and blank cells.\n          Formatting information is available for each cell.\n    \n          Note that this will raise a NotImplementedError when used with an\n          xlsx file.\n    \n        :param on_demand:\n    \n          Governs whether sheets are all loaded initially or when demanded\n          by the caller. See :doc:`on_demand`.\n    \n        :param ragged_rows:\n    \n          The default of ``False`` means all rows are padded out with empty cells so\n          that all rows have the same size as found in\n          :attr:`~xlrd.sheet.Sheet.ncols`.\n    \n          ``True`` means that there are no empty cells at the ends of rows.\n          This can result in substantial memory savings if rows are of widely\n          varying sizes. See also the :meth:`~xlrd.sheet.Sheet.row_len` method.\n    \n        :returns: An instance of the :class:`~xlrd.book.Book` class.\n        \"\"\"\n    \n        peeksz = 4\n        if file_contents:\n            peek = file_contents[:peeksz]\n        else:\n            filename = os.path.expanduser(filename)\n>           with open(filename, \"rb\") as f:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Harish\\\\PycharmProjects\\\\Framework_POM_9Login.xlsx'\n\n..\\..\\AppData\\Roaming\\Python\\Python36\\site-packages\\xlrd\\__init__.py:111: FileNotFoundError"}, "attachments": [{"name": "log", "source": "62862bac-1eb4-4b56-95c7-0e43537db7eb-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4df983d9-0c5a-4310-8aa6-c9a800313c7b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e85ffae0-b1c3-4f93-8ff0-432e8ce62595-attachment.txt", "type": "text/plain"}], "start": 1555703610850, "stop": 1555703610851, "uuid": "7d4070d6-e3cb-43d6-bee1-97f62972df08", "historyId": "2116f0ad00ab1de0effc54f114dd9496", "fullName": "tests.test_login.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-63VVHER"}, {"name": "thread", "value": "6592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}